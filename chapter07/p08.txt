In this problem, let REF(x.i) → DEF(x.k) denote that the linker will associate an
arbitrary reference to symbol x in module i to the definition of x in module k. For
each example below, use this notation to indicate how the linker would resolve
references to the multiply-defined symbol in each module. If there is a link-time
error (rule 1), write “error”. If the linker arbitrarily chooses one of the definitions
(rule 3), write “unknown”

A.

/* Module 1 */         /* Module 2 */
int main()             static int main = 1;
{                      int p2()
}                      {
                       }

a) REF(main.1)->DEF(main.1); since main in 2 is static, only main in 1 is visible to 1
b) REF(main.2)->DEF(main.2); need to resolve main symbol for local variable since have static,
                             therefore, use main in 2

B.

/* Module 1 */         /* Module 2 */
int x;                 double x;
void main()            int p2()
{                      {
}                      }

a) REF(x.1)->DEF(UNKNOWN); both are weak symbols, unknown for which one linker will choose
b) REF(x.2)->DEF(UNKNOWN); both are weak symbols, unknown for which one linker will choose 

C.

/* Module 1 */         /* Module 2 */
int x = 1;             double x = 1.0;
void main()            int p2()
{                      {
}                      }

a) REF(x.1)->DEF(ERROR); have two strong variables, link-time error
b) REF(x.2)->DEF(ERROR); have two strong variables, link-time error
