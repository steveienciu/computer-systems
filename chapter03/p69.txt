You are charged with maintaining a large C program, and you come across the following code:

typedef struct {
 int first;
 a_struct a[CNT];
 int last;
} b_struct;

void test(long i, b_struct *bp)
{
 int n = bp->first + bp->last;
 a_struct *ap = &bp->a[i];
 ap->x[ap->idx] = n;
}

The declarations of the compile-time constant CNT and the structure a_struct
are in a file for which you do not have the necessary access privilege. Fortunately,
you have a copy of the .o version of code, which you are able to disassemble with
the objdump program, yielding the following disassembly:

void test(long i, b_struct *bp)
in %rdi, bp in %rsi
0000000000000000 <test>:
 0: 8b 8e 20 01 00 00 mov 0x120(%rsi),%ecx
 6: 03 0e add (%rsi),%ecx
 8: 48 8d 04 bf lea (%rdi,%rdi,4),%rax
 c: 48 8d 04 c6 lea (%rsi,%rax,8),%rax
 10: 48 8b 50 08 mov 0x8(%rax),%rdx
 14: 48 63 c9 movslq %ecx,%rcx
 17: 48 89 4c d0 10 mov %rcx,0x10(%rax,%rdx,8)
 1c: c3 retq

Using your reverse engineering skills, deduce the following:

A. The value of CNT.

the total size of the structure is 280 bytes whic can be found from line 0x120(%rsi), %ecx
from line lea (%rdi,%rdi,4),%rax, can see that there are 5 elements in each structure since need to move 
by 5i to get to the next array element 
from line lea (%rsi,%rax,8),%rax, can see that the size of the largest element is 8 bytes and tht idx
is of type long. Also, from last mov instruction can see that the array will be of type long
in conclusion, CNT=280/(8*5)=7

B. A complete declaration of structure a_struct. Assume that the only fields
in this structure are idx and x, and that both of these contain signed values

typedef struct {
    long idx;
    long x[];
} a_struct;
