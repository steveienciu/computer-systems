Assume we execute the three summation functions below under the
following conditions:
- sizeof(int) = 4.
- The machine has a 4 KB direct-mapped cache with a 16-byte block size.
- Within the two loops, the code uses memory accesses only for the array data.
The loop indices and the value sum are held in registers.
- Array a is stored starting at memory address 0x08000000

typedef int array_t[N][N];

int sumA(array_t a)
{
    int i, j;
    int sum = 0;

    for (i = 0; i < N; i++)
        for (j = 0; j < N; j++) {
            sum += a[i][j];
        }

    return sum;
}

int sumB(array_t a)
{
    int i, j;
    int sum = 0;

    for (j = 0; j < N; j++)
        for (i = 0; i < N; i++) {
            sum += a[i][j];
        }

    return sum;
}

int sumC(array_t a)
{
    int i, j;
    int sum = 0;

    for (j = 0; j < N; j += 2)
        for (i = 0; i < N; i += 2) {
            sum += (a[i][j] + a[i+1][j] +
                    a[i][j+1] + a[i+1][j+1]);
        }

    return sum;
}

Fill in the table for the approximate cache miss rate for the two cases N = 64
and N = 60

C = 4096; B = 16; E = 1; S = 256

Function	N=64	N=60
sumA        25%     25%
sumB        100%    100%
sumC        50%     50%
